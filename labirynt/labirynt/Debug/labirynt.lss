
labirynt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000005dc  00000670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800132  00800132  000006a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000116e  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a74  00000000  00000000  000018ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000727  00000000  00000000  0000235e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00002a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000585  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000556  00000000  00000000  000030e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000363b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec ed       	ldi	r30, 0xDC	; 220
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 33       	cpi	r26, 0x32	; 50
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a2 e3       	ldi	r26, 0x32	; 50
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	aa 33       	cpi	r26, 0x3A	; 58
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 38 01 	call	0x270	; 0x270 <main>
  ea:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <where>:
		0B11000011};
		
int where(uint8_t XX){
	int wynik=0;
	int i =0;
	for (i=XX;i>0;i=i/2)
  f2:	28 2f       	mov	r18, r24
  f4:	30 e0       	ldi	r19, 0x00	; 0
		0B11001111,
		0B11000111,
		0B11000011};
		
int where(uint8_t XX){
	int wynik=0;
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
	int i =0;
	for (i=XX;i>0;i=i/2)
  fa:	09 c0       	rjmp	.+18     	; 0x10e <where+0x1c>
	{
		wynik=wynik+1;
  fc:	01 96       	adiw	r24, 0x01	; 1
		0B11000011};
		
int where(uint8_t XX){
	int wynik=0;
	int i =0;
	for (i=XX;i>0;i=i/2)
  fe:	a9 01       	movw	r20, r18
 100:	33 23       	and	r19, r19
 102:	14 f4       	brge	.+4      	; 0x108 <where+0x16>
 104:	4f 5f       	subi	r20, 0xFF	; 255
 106:	5f 4f       	sbci	r21, 0xFF	; 255
 108:	9a 01       	movw	r18, r20
 10a:	35 95       	asr	r19
 10c:	27 95       	ror	r18
 10e:	12 16       	cp	r1, r18
 110:	13 06       	cpc	r1, r19
 112:	a4 f3       	brlt	.-24     	; 0xfc <where+0xa>
	{
		wynik=wynik+1;
	}
	return wynik;
}
 114:	08 95       	ret

00000116 <spi_send>:
void spi_send(uint8_t data)
{
    uint8_t i;

    for (i = 0; i < 8; i++, data <<= 1)
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	11 c0       	rjmp	.+34     	; 0x13c <spi_send+0x26>
    {
	CLK_LOW();
 11a:	95 b1       	in	r25, 0x05	; 5
 11c:	9e 7f       	andi	r25, 0xFE	; 254
 11e:	95 b9       	out	0x05, r25	; 5
	if (data & 0x80)
 120:	88 23       	and	r24, r24
 122:	24 f4       	brge	.+8      	; 0x12c <spi_send+0x16>
	    DATA_HIGH();
 124:	95 b1       	in	r25, 0x05	; 5
 126:	94 60       	ori	r25, 0x04	; 4
 128:	95 b9       	out	0x05, r25	; 5
 12a:	03 c0       	rjmp	.+6      	; 0x132 <spi_send+0x1c>
	else
	    DATA_LOW();
 12c:	95 b1       	in	r25, 0x05	; 5
 12e:	9b 7f       	andi	r25, 0xFB	; 251
 130:	95 b9       	out	0x05, r25	; 5
	CLK_HIGH();
 132:	95 b1       	in	r25, 0x05	; 5
 134:	91 60       	ori	r25, 0x01	; 1
 136:	95 b9       	out	0x05, r25	; 5
}
void spi_send(uint8_t data)
{
    uint8_t i;

    for (i = 0; i < 8; i++, data <<= 1)
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	88 0f       	add	r24, r24
 13c:	28 30       	cpi	r18, 0x08	; 8
 13e:	68 f3       	brcs	.-38     	; 0x11a <spi_send+0x4>
	else
	    DATA_LOW();
	CLK_HIGH();
    }
    
}
 140:	08 95       	ret

00000142 <max7219_writec>:

void max7219_writec(uint8_t high_byte, uint8_t low_byte)
{
 142:	cf 93       	push	r28
 144:	c6 2f       	mov	r28, r22
    CS_LOW();
 146:	95 b1       	in	r25, 0x05	; 5
 148:	9d 7f       	andi	r25, 0xFD	; 253
 14a:	95 b9       	out	0x05, r25	; 5
    spi_send(high_byte);
 14c:	0e 94 8b 00 	call	0x116	; 0x116 <spi_send>
    spi_send(low_byte);
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 8b 00 	call	0x116	; 0x116 <spi_send>
    CS_HIGH();
 156:	85 b1       	in	r24, 0x05	; 5
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	85 b9       	out	0x05, r24	; 5
}
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <max7219_clear>:

void max7219_clear(void)
{
 160:	cf 93       	push	r28
    uint8_t i;
    for (i = 0; i < 8; i++)
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	05 c0       	rjmp	.+10     	; 0x170 <max7219_clear+0x10>
    {
	max7219_writec(i+1, 0);
 166:	cf 5f       	subi	r28, 0xFF	; 255
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	8c 2f       	mov	r24, r28
 16c:	0e 94 a1 00 	call	0x142	; 0x142 <max7219_writec>
}

void max7219_clear(void)
{
    uint8_t i;
    for (i = 0; i < 8; i++)
 170:	c8 30       	cpi	r28, 0x08	; 8
 172:	c8 f3       	brcs	.-14     	; 0x166 <max7219_clear+0x6>
    {
	max7219_writec(i+1, 0);
    }
}
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <max7219_init>:

void max7219_init(void)
{
    INIT_PORT();
 178:	84 b1       	in	r24, 0x04	; 4
 17a:	87 60       	ori	r24, 0x07	; 7
 17c:	84 b9       	out	0x04, r24	; 4
    // Decode mode: none
    max7219_writec(0x0b, 0);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	8b e0       	ldi	r24, 0x0B	; 11
 182:	0e 94 a1 00 	call	0x142	; 0x142 <max7219_writec>
    // Intensity: 3 (0-15)
    max7219_writec(0x0A, 1);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	8a e0       	ldi	r24, 0x0A	; 10
 18a:	0e 94 a1 00 	call	0x142	; 0x142 <max7219_writec>
    // Scan limit: All "digits" (rows) on
    max7219_writec(0x0B, 7);
 18e:	67 e0       	ldi	r22, 0x07	; 7
 190:	8b e0       	ldi	r24, 0x0B	; 11
 192:	0e 94 a1 00 	call	0x142	; 0x142 <max7219_writec>
    // Shutdown register: Display on
    max7219_writec(0x0C, 1);
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	8c e0       	ldi	r24, 0x0C	; 12
 19a:	0e 94 a1 00 	call	0x142	; 0x142 <max7219_writec>
    // Display test: off
    max7219_writec(0x0F, 0);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	8f e0       	ldi	r24, 0x0F	; 15
 1a2:	0e 94 a1 00 	call	0x142	; 0x142 <max7219_writec>
    max7219_clear();
 1a6:	0e 94 b0 00 	call	0x160	; 0x160 <max7219_clear>
 1aa:	08 95       	ret

000001ac <update_display>:


uint8_t display[8];

void update_display(void)
{
 1ac:	cf 93       	push	r28
    uint8_t i;

    for (i = 0; i < 8; i++)
 1ae:	c0 e0       	ldi	r28, 0x00	; 0
 1b0:	09 c0       	rjmp	.+18     	; 0x1c4 <update_display+0x18>
    {
	max7219_writec(i+1, display[i]);
 1b2:	ec 2f       	mov	r30, r28
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	ee 5c       	subi	r30, 0xCE	; 206
 1b8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ba:	60 81       	ld	r22, Z
 1bc:	cf 5f       	subi	r28, 0xFF	; 255
 1be:	8c 2f       	mov	r24, r28
 1c0:	0e 94 a1 00 	call	0x142	; 0x142 <max7219_writec>

void update_display(void)
{
    uint8_t i;

    for (i = 0; i < 8; i++)
 1c4:	c8 30       	cpi	r28, 0x08	; 8
 1c6:	a8 f3       	brcs	.-22     	; 0x1b2 <update_display+0x6>
    {
	max7219_writec(i+1, display[i]);
    }
}
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <image>:

void image( uint8_t im[8])
{
 1cc:	bc 01       	movw	r22, r24
    uint8_t i;

    for (i = 0; i < 8; i++)
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <image+0x1c>
	display[i] = im[i];
 1d2:	29 2f       	mov	r18, r25
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	fb 01       	movw	r30, r22
 1d8:	e2 0f       	add	r30, r18
 1da:	f3 1f       	adc	r31, r19
 1dc:	40 81       	ld	r20, Z
 1de:	f9 01       	movw	r30, r18
 1e0:	ee 5c       	subi	r30, 0xCE	; 206
 1e2:	fe 4f       	sbci	r31, 0xFE	; 254
 1e4:	40 83       	st	Z, r20

void image( uint8_t im[8])
{
    uint8_t i;

    for (i = 0; i < 8; i++)
 1e6:	9f 5f       	subi	r25, 0xFF	; 255
 1e8:	98 30       	cpi	r25, 0x08	; 8
 1ea:	98 f3       	brcs	.-26     	; 0x1d2 <image+0x6>
	display[i] = im[i];
}
 1ec:	08 95       	ret

000001ee <get_adc_value>:
//This function retreives the ADC value from the given channel
uint16_t get_adc_value(uint8_t channel)
{
	ADMUX &=0xf0;
 1ee:	ec e7       	ldi	r30, 0x7C	; 124
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	90 81       	ld	r25, Z
 1f4:	90 7f       	andi	r25, 0xF0	; 240
 1f6:	90 83       	st	Z, r25
	//select channel
	ADMUX |= channel;
 1f8:	90 81       	ld	r25, Z
 1fa:	89 2b       	or	r24, r25
 1fc:	80 83       	st	Z, r24

	//start conversion on channel
	ADCSRA |= (1<<ADSC);
 1fe:	ea e7       	ldi	r30, 0x7A	; 122
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 64       	ori	r24, 0x40	; 64
 206:	80 83       	st	Z, r24

	//wait for conversion to finish
	while((ADCSRA & (1<<ADIF)) == 0);
 208:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 20c:	84 ff       	sbrs	r24, 4
 20e:	fc cf       	rjmp	.-8      	; 0x208 <get_adc_value+0x1a>

	return(ADCW); // return the converted value which is in ADCW
 210:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 214:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 218:	08 95       	ret

0000021a <player_direction>:
/* This function reads the joystick analog sensors input and returns the direction
0 - Stationary  1 - Up  2 - Right 3 - Down 4- Left*/
uint8_t player_direction()
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
	uint16_t x_pos, y_pos;
	uint8_t direction = 0; //static to retain direction during subsequent calls
	x_pos = get_adc_value(0);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 f7 00 	call	0x1ee	; 0x1ee <get_adc_value>
 224:	ec 01       	movw	r28, r24
	y_pos = get_adc_value(1);
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 f7 00 	call	0x1ee	; 0x1ee <get_adc_value>
 22c:	9c 01       	movw	r18, r24
	if(direction == 4 || direction == 2 || direction == 0)
		{
			if((x_pos>=0)&&(x_pos < 300))
 22e:	cc 32       	cpi	r28, 0x2C	; 44
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	d8 07       	cpc	r29, r24
 234:	10 f0       	brcs	.+4      	; 0x23a <player_direction+0x20>
/* This function reads the joystick analog sensors input and returns the direction
0 - Stationary  1 - Up  2 - Right 3 - Down 4- Left*/
uint8_t player_direction()
{
	uint16_t x_pos, y_pos;
	uint8_t direction = 0; //static to retain direction during subsequent calls
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	01 c0       	rjmp	.+2      	; 0x23c <player_direction+0x22>
	x_pos = get_adc_value(0);
	y_pos = get_adc_value(1);
	if(direction == 4 || direction == 2 || direction == 0)
		{
			if((x_pos>=0)&&(x_pos < 300))
			direction = 3;
 23a:	83 e0       	ldi	r24, 0x03	; 3

			if((x_pos >= 700)&&(x_pos < 1024))
 23c:	cc 5b       	subi	r28, 0xBC	; 188
 23e:	d2 40       	sbci	r29, 0x02	; 2
 240:	c4 34       	cpi	r28, 0x44	; 68
 242:	d1 40       	sbci	r29, 0x01	; 1
 244:	08 f4       	brcc	.+2      	; 0x248 <player_direction+0x2e>
			direction = 1;
 246:	81 e0       	ldi	r24, 0x01	; 1
		}
		
		if(direction == 3 || direction == 1 || direction == 0)
 248:	83 30       	cpi	r24, 0x03	; 3
 24a:	21 f0       	breq	.+8      	; 0x254 <player_direction+0x3a>
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	11 f0       	breq	.+4      	; 0x254 <player_direction+0x3a>
 250:	81 11       	cpse	r24, r1
 252:	0b c0       	rjmp	.+22     	; 0x26a <player_direction+0x50>
		{
			if((y_pos >=0 )&&(y_pos<300))
 254:	2c 32       	cpi	r18, 0x2C	; 44
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	39 07       	cpc	r19, r25
 25a:	08 f4       	brcc	.+2      	; 0x25e <player_direction+0x44>
			direction = 4;
 25c:	84 e0       	ldi	r24, 0x04	; 4

			if((y_pos >= 700)&&(y_pos<1024))
 25e:	2c 5b       	subi	r18, 0xBC	; 188
 260:	32 40       	sbci	r19, 0x02	; 2
 262:	24 34       	cpi	r18, 0x44	; 68
 264:	31 40       	sbci	r19, 0x01	; 1
 266:	08 f4       	brcc	.+2      	; 0x26a <player_direction+0x50>
			direction =2;
 268:	82 e0       	ldi	r24, 0x02	; 2
		}
	return direction;
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <main>:


int main(void)
{
    max7219_init();
 270:	0e 94 bc 00 	call	0x178	; 0x178 <max7219_init>
	DDRC = 0;										//port a as input
 274:	17 b8       	out	0x07, r1	; 7
	ADMUX |=0b01 << REFS0;
 276:	ec e7       	ldi	r30, 0x7C	; 124
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	80 64       	ori	r24, 0x40	; 64
 27e:	80 83       	st	Z, r24
	ADCSRA=(1<<ADEN) | (1<<ADIE)| (1<<ADPS2) | (1<<ADPS1)| (1<<ADPS0);		// enable ADC , sampling freq = clk/128
 280:	8f e8       	ldi	r24, 0x8F	; 143
 282:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    DIDR0 |= 1<< PINC0;
 286:	ee e7       	ldi	r30, 0x7E	; 126
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	80 83       	st	Z, r24
    DIDR0 |= 1<< PINC1;
 290:	80 81       	ld	r24, Z
 292:	82 60       	ori	r24, 0x02	; 2
 294:	80 83       	st	Z, r24
	while(1)
    {
		image(level1);
 296:	88 e2       	ldi	r24, 0x28	; 40
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <image>
		update_display();
 29e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <update_display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	2f ef       	ldi	r18, 0xFF	; 255
 2a4:	39 e6       	ldi	r19, 0x69	; 105
 2a6:	48 e1       	ldi	r20, 0x18	; 24
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	30 40       	sbci	r19, 0x00	; 0
 2ac:	40 40       	sbci	r20, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x38>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x42>
 2b2:	00 00       	nop
		_delay_ms(500);
		image(player_level1);
 2b4:	80 e2       	ldi	r24, 0x20	; 32
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <image>
		update_display();
 2bc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <update_display>
 2c0:	5f ef       	ldi	r21, 0xFF	; 255
 2c2:	89 e6       	ldi	r24, 0x69	; 105
 2c4:	98 e1       	ldi	r25, 0x18	; 24
 2c6:	51 50       	subi	r21, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x56>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x60>
 2d0:	00 00       	nop
		_delay_ms(500);
		if (player_direction()>0)
 2d2:	0e 94 0d 01 	call	0x21a	; 0x21a <player_direction>
 2d6:	88 23       	and	r24, r24
 2d8:	f1 f2       	breq	.-68     	; 0x296 <main+0x26>
		{
			uint8_t move = player_direction();
 2da:	0e 94 0d 01 	call	0x21a	; 0x21a <player_direction>
			if(move == 1){
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <main+0x74>
 2e2:	4a c0       	rjmp	.+148    	; 0x378 <main+0x108>
				player_level1[8-where(cordx)]=level1[8-where(cordx)];
 2e4:	10 91 31 01 	lds	r17, 0x0131	; 0x800131 <cordx>
 2e8:	81 2f       	mov	r24, r17
 2ea:	0e 94 79 00 	call	0xf2	; 0xf2 <where>
 2ee:	c8 e0       	ldi	r28, 0x08	; 8
 2f0:	d0 e0       	ldi	r29, 0x00	; 0
 2f2:	9e 01       	movw	r18, r28
 2f4:	28 1b       	sub	r18, r24
 2f6:	39 0b       	sbc	r19, r25
 2f8:	c9 01       	movw	r24, r18
 2fa:	f9 01       	movw	r30, r18
 2fc:	e8 5d       	subi	r30, 0xD8	; 216
 2fe:	fe 4f       	sbci	r31, 0xFE	; 254
 300:	20 81       	ld	r18, Z
 302:	fc 01       	movw	r30, r24
 304:	e0 5e       	subi	r30, 0xE0	; 224
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	20 83       	st	Z, r18
				cordx=cordx<<1;
 30a:	81 2f       	mov	r24, r17
 30c:	88 0f       	add	r24, r24
 30e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <cordx>
				if ((player_level1[8-where(cordx)]&cordy)>0)
 312:	0e 94 79 00 	call	0xf2	; 0xf2 <where>
 316:	ae 01       	movw	r20, r28
 318:	48 1b       	sub	r20, r24
 31a:	59 0b       	sbc	r21, r25
 31c:	fa 01       	movw	r30, r20
 31e:	e0 5e       	subi	r30, 0xE0	; 224
 320:	fe 4f       	sbci	r31, 0xFE	; 254
 322:	20 81       	ld	r18, Z
 324:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <cordy>
 328:	23 23       	and	r18, r19
 32a:	b1 f0       	breq	.+44     	; 0x358 <main+0xe8>
				{
					player_level1[8-where(cordx)]=player_level1_start[8-where(cordx)];
 32c:	fa 01       	movw	r30, r20
 32e:	e8 5e       	subi	r30, 0xE8	; 232
 330:	fe 4f       	sbci	r31, 0xFE	; 254
 332:	20 81       	ld	r18, Z
 334:	fa 01       	movw	r30, r20
 336:	e0 5e       	subi	r30, 0xE0	; 224
 338:	fe 4f       	sbci	r31, 0xFE	; 254
 33a:	20 83       	st	Z, r18
					cordx = 0B00000001;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <cordx>
					cordy = 0b01000000;
 342:	80 e4       	ldi	r24, 0x40	; 64
 344:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <cordy>
					image(player_level1_start);
 348:	88 e1       	ldi	r24, 0x18	; 24
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <image>
					update_display();
 350:	0e 94 d6 00 	call	0x1ac	; 0x1ac <update_display>
					move=0;
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	10 c0       	rjmp	.+32     	; 0x378 <main+0x108>
				}
				else{
				player_level1[8-where(cordx)]=level1[8-where(cordx)] |cordy;
 358:	fa 01       	movw	r30, r20
 35a:	e8 5d       	subi	r30, 0xD8	; 216
 35c:	fe 4f       	sbci	r31, 0xFE	; 254
 35e:	20 81       	ld	r18, Z
 360:	fa 01       	movw	r30, r20
 362:	e0 5e       	subi	r30, 0xE0	; 224
 364:	fe 4f       	sbci	r31, 0xFE	; 254
 366:	32 2b       	or	r19, r18
 368:	30 83       	st	Z, r19
				image(player_level1);
 36a:	80 e2       	ldi	r24, 0x20	; 32
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <image>
				update_display();
 372:	0e 94 d6 00 	call	0x1ac	; 0x1ac <update_display>
				move=0;}
 376:	80 e0       	ldi	r24, 0x00	; 0
			}
			if(move == 3){
 378:	83 30       	cpi	r24, 0x03	; 3
 37a:	09 f0       	breq	.+2      	; 0x37e <main+0x10e>
 37c:	4a c0       	rjmp	.+148    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
				player_level1[8-where(cordx)]=level1[8-where(cordx)];
 37e:	10 91 31 01 	lds	r17, 0x0131	; 0x800131 <cordx>
 382:	81 2f       	mov	r24, r17
 384:	0e 94 79 00 	call	0xf2	; 0xf2 <where>
 388:	c8 e0       	ldi	r28, 0x08	; 8
 38a:	d0 e0       	ldi	r29, 0x00	; 0
 38c:	9e 01       	movw	r18, r28
 38e:	28 1b       	sub	r18, r24
 390:	39 0b       	sbc	r19, r25
 392:	c9 01       	movw	r24, r18
 394:	f9 01       	movw	r30, r18
 396:	e8 5d       	subi	r30, 0xD8	; 216
 398:	fe 4f       	sbci	r31, 0xFE	; 254
 39a:	20 81       	ld	r18, Z
 39c:	fc 01       	movw	r30, r24
 39e:	e0 5e       	subi	r30, 0xE0	; 224
 3a0:	fe 4f       	sbci	r31, 0xFE	; 254
 3a2:	20 83       	st	Z, r18
				cordx=cordx>>1;
 3a4:	81 2f       	mov	r24, r17
 3a6:	86 95       	lsr	r24
 3a8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <cordx>
				if ((player_level1[8-where(cordx)]&cordy)>0)
 3ac:	0e 94 79 00 	call	0xf2	; 0xf2 <where>
 3b0:	ae 01       	movw	r20, r28
 3b2:	48 1b       	sub	r20, r24
 3b4:	59 0b       	sbc	r21, r25
 3b6:	fa 01       	movw	r30, r20
 3b8:	e0 5e       	subi	r30, 0xE0	; 224
 3ba:	fe 4f       	sbci	r31, 0xFE	; 254
 3bc:	20 81       	ld	r18, Z
 3be:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <cordy>
 3c2:	23 23       	and	r18, r19
 3c4:	b1 f0       	breq	.+44     	; 0x3f2 <main+0x182>
				{
					player_level1[8-where(cordx)]=player_level1_start[8-where(cordx)];
 3c6:	fa 01       	movw	r30, r20
 3c8:	e8 5e       	subi	r30, 0xE8	; 232
 3ca:	fe 4f       	sbci	r31, 0xFE	; 254
 3cc:	20 81       	ld	r18, Z
 3ce:	fa 01       	movw	r30, r20
 3d0:	e0 5e       	subi	r30, 0xE0	; 224
 3d2:	fe 4f       	sbci	r31, 0xFE	; 254
 3d4:	20 83       	st	Z, r18
					cordx = 0B00000001;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <cordx>
					cordy = 0b01000000;
 3dc:	80 e4       	ldi	r24, 0x40	; 64
 3de:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <cordy>
					image(player_level1_start);
 3e2:	88 e1       	ldi	r24, 0x18	; 24
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <image>
					update_display();
 3ea:	0e 94 d6 00 	call	0x1ac	; 0x1ac <update_display>
					move=0;
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	10 c0       	rjmp	.+32     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
				}
				else{
				player_level1[8-where(cordx)]=level1[8-where(cordx)] |cordy;
 3f2:	fa 01       	movw	r30, r20
 3f4:	e8 5d       	subi	r30, 0xD8	; 216
 3f6:	fe 4f       	sbci	r31, 0xFE	; 254
 3f8:	20 81       	ld	r18, Z
 3fa:	fa 01       	movw	r30, r20
 3fc:	e0 5e       	subi	r30, 0xE0	; 224
 3fe:	fe 4f       	sbci	r31, 0xFE	; 254
 400:	32 2b       	or	r19, r18
 402:	30 83       	st	Z, r19
				image(player_level1);
 404:	80 e2       	ldi	r24, 0x20	; 32
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	0e 94 e6 00 	call	0x1cc	; 0x1cc <image>
				update_display();
 40c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <update_display>
				move=0;}
 410:	80 e0       	ldi	r24, 0x00	; 0
			}
			if(move == 2){
 412:	82 30       	cpi	r24, 0x02	; 2
 414:	e1 f5       	brne	.+120    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
				player_level1[8-where(cordx)]=level1[8-where(cordx)];
 416:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <cordx>
 41a:	0e 94 79 00 	call	0xf2	; 0xf2 <where>
 41e:	28 e0       	ldi	r18, 0x08	; 8
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	a9 01       	movw	r20, r18
 424:	48 1b       	sub	r20, r24
 426:	59 0b       	sbc	r21, r25
 428:	ca 01       	movw	r24, r20
 42a:	fa 01       	movw	r30, r20
 42c:	e8 5d       	subi	r30, 0xD8	; 216
 42e:	fe 4f       	sbci	r31, 0xFE	; 254
 430:	30 81       	ld	r19, Z
 432:	fa 01       	movw	r30, r20
 434:	e0 5e       	subi	r30, 0xE0	; 224
 436:	fe 4f       	sbci	r31, 0xFE	; 254
 438:	30 83       	st	Z, r19
				cordy=cordy>>1;
 43a:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <cordy>
 43e:	26 95       	lsr	r18
 440:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <cordy>
				if ((player_level1[8-where(cordx)]&cordy)>0)
 444:	43 2f       	mov	r20, r19
 446:	42 23       	and	r20, r18
 448:	b1 f0       	breq	.+44     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
				{
					player_level1[8-where(cordx)]=player_level1_start[8-where(cordx)];
 44a:	fc 01       	movw	r30, r24
 44c:	e8 5e       	subi	r30, 0xE8	; 232
 44e:	fe 4f       	sbci	r31, 0xFE	; 254
 450:	20 81       	ld	r18, Z
 452:	fc 01       	movw	r30, r24
 454:	e0 5e       	subi	r30, 0xE0	; 224
 456:	fe 4f       	sbci	r31, 0xFE	; 254
 458:	20 83       	st	Z, r18
					cordx = 0B00000001;            
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <cordx>
					cordy = 0b01000000;  
 460:	80 e4       	ldi	r24, 0x40	; 64
 462:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <cordy>
					image(player_level1_start);
 466:	88 e1       	ldi	r24, 0x18	; 24
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <image>
					update_display();
 46e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <update_display>
					move=0;
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0c c0       	rjmp	.+24     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
				}
				else{
				player_level1[8-where(cordx)]=level1[8-where(cordx)] |cordy;
 476:	fc 01       	movw	r30, r24
 478:	e0 5e       	subi	r30, 0xE0	; 224
 47a:	fe 4f       	sbci	r31, 0xFE	; 254
 47c:	23 2b       	or	r18, r19
 47e:	20 83       	st	Z, r18
				image(player_level1);
 480:	80 e2       	ldi	r24, 0x20	; 32
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 e6 00 	call	0x1cc	; 0x1cc <image>
				update_display();
 488:	0e 94 d6 00 	call	0x1ac	; 0x1ac <update_display>
				move=0;}
 48c:	80 e0       	ldi	r24, 0x00	; 0
			}
			if(move == 4){
 48e:	84 30       	cpi	r24, 0x04	; 4
 490:	d1 f5       	brne	.+116    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
				player_level1[8-where(cordx)]=level1[8-where(cordx)];
 492:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <cordx>
 496:	0e 94 79 00 	call	0xf2	; 0xf2 <where>
 49a:	28 e0       	ldi	r18, 0x08	; 8
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	a9 01       	movw	r20, r18
 4a0:	48 1b       	sub	r20, r24
 4a2:	59 0b       	sbc	r21, r25
 4a4:	ca 01       	movw	r24, r20
 4a6:	fa 01       	movw	r30, r20
 4a8:	e8 5d       	subi	r30, 0xD8	; 216
 4aa:	fe 4f       	sbci	r31, 0xFE	; 254
 4ac:	30 81       	ld	r19, Z
 4ae:	fa 01       	movw	r30, r20
 4b0:	e0 5e       	subi	r30, 0xE0	; 224
 4b2:	fe 4f       	sbci	r31, 0xFE	; 254
 4b4:	30 83       	st	Z, r19
				cordy=cordy<<1;
 4b6:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <cordy>
 4ba:	22 0f       	add	r18, r18
 4bc:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <cordy>
				if ((player_level1[8-where(cordx)]&cordy)>0)
 4c0:	43 2f       	mov	r20, r19
 4c2:	42 23       	and	r20, r18
 4c4:	a9 f0       	breq	.+42     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
				{
					player_level1[8-where(cordx)]=player_level1_start[8-where(cordx)];
 4c6:	fc 01       	movw	r30, r24
 4c8:	e8 5e       	subi	r30, 0xE8	; 232
 4ca:	fe 4f       	sbci	r31, 0xFE	; 254
 4cc:	20 81       	ld	r18, Z
 4ce:	fc 01       	movw	r30, r24
 4d0:	e0 5e       	subi	r30, 0xE0	; 224
 4d2:	fe 4f       	sbci	r31, 0xFE	; 254
 4d4:	20 83       	st	Z, r18
					cordx = 0B00000001;
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <cordx>
					cordy = 0b01000000;
 4dc:	80 e4       	ldi	r24, 0x40	; 64
 4de:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <cordy>
					image(player_level1_start);
 4e2:	88 e1       	ldi	r24, 0x18	; 24
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <image>
					update_display();
 4ea:	0e 94 d6 00 	call	0x1ac	; 0x1ac <update_display>
 4ee:	0b c0       	rjmp	.+22     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
					move=0;
				}
				else{
				player_level1[8-where(cordx)]=level1[8-where(cordx)] |cordy;
 4f0:	fc 01       	movw	r30, r24
 4f2:	e0 5e       	subi	r30, 0xE0	; 224
 4f4:	fe 4f       	sbci	r31, 0xFE	; 254
 4f6:	23 2b       	or	r18, r19
 4f8:	20 83       	st	Z, r18
				image(player_level1);
 4fa:	80 e2       	ldi	r24, 0x20	; 32
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	0e 94 e6 00 	call	0x1cc	; 0x1cc <image>
				update_display();
 502:	0e 94 d6 00 	call	0x1ac	; 0x1ac <update_display>
				move=0;}
			}
			if ((cordx==0B00000001)&(cordy == 0b00010000))
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <cordx>
 50c:	81 30       	cpi	r24, 0x01	; 1
 50e:	09 f0       	breq	.+2      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <cordy>
 518:	20 31       	cpi	r18, 0x10	; 16
 51a:	09 f0       	breq	.+2      	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	89 23       	and	r24, r25
 520:	09 f4       	brne	.+2      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 522:	b9 ce       	rjmp	.-654    	; 0x296 <main+0x26>
 524:	38 c0       	rjmp	.+112    	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
 526:	5f ef       	ldi	r21, 0xFF	; 255
 528:	89 e6       	ldi	r24, 0x69	; 105
 52a:	98 e1       	ldi	r25, 0x18	; 24
 52c:	51 50       	subi	r21, 0x01	; 1
 52e:	80 40       	sbci	r24, 0x00	; 0
 530:	90 40       	sbci	r25, 0x00	; 0
 532:	e1 f7       	brne	.-8      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 534:	00 c0       	rjmp	.+0      	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 536:	00 00       	nop
			{
				uint8_t j ;
				for (j=5;j>0;j=j-1)
				{
					_delay_ms(500);
					image(w);
 538:	80 e1       	ldi	r24, 0x10	; 16
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <image>
					update_display();
 540:	0e 94 d6 00 	call	0x1ac	; 0x1ac <update_display>
 544:	2f ef       	ldi	r18, 0xFF	; 255
 546:	39 e6       	ldi	r19, 0x69	; 105
 548:	48 e1       	ldi	r20, 0x18	; 24
 54a:	21 50       	subi	r18, 0x01	; 1
 54c:	30 40       	sbci	r19, 0x00	; 0
 54e:	40 40       	sbci	r20, 0x00	; 0
 550:	e1 f7       	brne	.-8      	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 552:	00 c0       	rjmp	.+0      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
 554:	00 00       	nop
					_delay_ms(500);
					image(WIN_I);
 556:	88 e0       	ldi	r24, 0x08	; 8
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <image>
					update_display();
 55e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <update_display>
 562:	5f ef       	ldi	r21, 0xFF	; 255
 564:	89 e6       	ldi	r24, 0x69	; 105
 566:	98 e1       	ldi	r25, 0x18	; 24
 568:	51 50       	subi	r21, 0x01	; 1
 56a:	80 40       	sbci	r24, 0x00	; 0
 56c:	90 40       	sbci	r25, 0x00	; 0
 56e:	e1 f7       	brne	.-8      	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 570:	00 c0       	rjmp	.+0      	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
 572:	00 00       	nop
					_delay_ms(500);
					image(n);
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	91 e0       	ldi	r25, 0x01	; 1
 578:	0e 94 e6 00 	call	0x1cc	; 0x1cc <image>
					update_display();
 57c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <update_display>
 580:	2f ef       	ldi	r18, 0xFF	; 255
 582:	39 e6       	ldi	r19, 0x69	; 105
 584:	48 e1       	ldi	r20, 0x18	; 24
 586:	21 50       	subi	r18, 0x01	; 1
 588:	30 40       	sbci	r19, 0x00	; 0
 58a:	40 40       	sbci	r20, 0x00	; 0
 58c:	e1 f7       	brne	.-8      	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 590:	00 00       	nop
				move=0;}
			}
			if ((cordx==0B00000001)&(cordy == 0b00010000))
			{
				uint8_t j ;
				for (j=5;j>0;j=j-1)
 592:	c1 50       	subi	r28, 0x01	; 1
 594:	01 c0       	rjmp	.+2      	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
 596:	c5 e0       	ldi	r28, 0x05	; 5
 598:	c1 11       	cpse	r28, r1
 59a:	c5 cf       	rjmp	.-118    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
					_delay_ms(500);
					image(n);
					update_display();
					_delay_ms(500);
				}
				player_level1[8-where(cordx)]=player_level1_start[8-where(cordx)];
 59c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <cordx>
 5a0:	0e 94 79 00 	call	0xf2	; 0xf2 <where>
 5a4:	28 e0       	ldi	r18, 0x08	; 8
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	a9 01       	movw	r20, r18
 5aa:	48 1b       	sub	r20, r24
 5ac:	59 0b       	sbc	r21, r25
 5ae:	fa 01       	movw	r30, r20
 5b0:	e8 5e       	subi	r30, 0xE8	; 232
 5b2:	fe 4f       	sbci	r31, 0xFE	; 254
 5b4:	20 81       	ld	r18, Z
 5b6:	fa 01       	movw	r30, r20
 5b8:	e0 5e       	subi	r30, 0xE0	; 224
 5ba:	fe 4f       	sbci	r31, 0xFE	; 254
 5bc:	20 83       	st	Z, r18
				cordx = 0B00000001;
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <cordx>
				cordy = 0b01000000;
 5c4:	80 e4       	ldi	r24, 0x40	; 64
 5c6:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <cordy>
				image(player_level1_start);
 5ca:	88 e1       	ldi	r24, 0x18	; 24
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	0e 94 e6 00 	call	0x1cc	; 0x1cc <image>
				update_display();
 5d2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <update_display>
 5d6:	5f ce       	rjmp	.-834    	; 0x296 <main+0x26>

000005d8 <_exit>:
 5d8:	f8 94       	cli

000005da <__stop_program>:
 5da:	ff cf       	rjmp	.-2      	; 0x5da <__stop_program>
